services:
  traefik:
    image: traefik:v3-nanoserver-ltsc2022
    command:
      - --providers.docker.swarmMode=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --providers.docker.network=entask
      - --api.insecure=true  # remove or secure in production
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 8080
        published: 8080
        protocol: tcp
        mode: host
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - entask
    deploy:
      placement:
        constraints:
          - node.role == manager
      replicas: 1
      restart_policy:
        condition: on-failure

  postgres:
    image: postgres:alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ./core/postgres/initdb.sql:/docker-entrypoint-initdb.d/init.sql
      - ./core/postgres/data:/var/lib/postgresql/data
    networks:
      - entask
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-p", "${POSTGRES_PORT}"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 5s
    deploy:
      replicas: 1

  pgbouncer:
    image: bitnami/pgbouncer:1.24.1
    environment:
      PGBOUNCER_PORT: ${PGBOUNCER_PORT}
      POSTGRESQL_HOST: ${POSTGRES_HOST}
      POSTGRESQL_PORT: ${POSTGRES_PORT}
      POSTGRESQL_PASSWORD: ${AUTH_DB_USER}
      POSTGRESQL_USER: ${AUTH_DB_PASSWORD}
    volumes:
      - ./core/pgbouncer/pgbouncer.ini:/etc/pgbouncer/pgbouncer.ini:ro
      - ./core/pgbouncer/userlist.txt:/etc/pgbouncer/userlist.txt:ro
    networks:
      - entask
    deploy:
      replicas: 1

  flyway:
    image: flyway-entask:latest
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_MIGRATIONS_USER: ${POSTGRES_MIGRATIONS_USER}
      POSTGRES_MIGRATIONS_PASSWORD: ${POSTGRES_MIGRATIONS_PASSWORD}
      AUTH_DB: ${AUTH_DB}
      GATEWAY_DB: ${GATEWAY_DB}
      CONVERSION_DB: ${CONVERSION_DB}
    volumes:
      - ./core/flyway/scripts:/flyway/sql/
    networks:
      - entask
    deploy:
      replicas: 1

  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${POSTGRES_PASSWORD}
    networks:
      - entask
    ports:
      - "5434:80"
    deploy:
      replicas: 1

  frontend:
    image: frontend-entask:latest
    environment:
      FRONTEND_PORT: ${FRONTEND_PORT}
    volumes:
      - ./frontend:/frontend
    networks:
      - entask
    ports:
      - target: ${FRONTEND_PORT:-4200}
        published: ${FRONTEND_PORT:-4200}
        protocol: tcp
        mode: host
    deploy:
      replicas: 1
    labels:
      - traefik.enable=true
      - traefik.http.routers.frontend.rule=PathPrefix(`/`)
      - traefik.http.services.frontend.loadbalancer.server.port=${FRONTEND_PORT}

  auth-service:
    image: auth-service-entask:latest
    environment:
      SERVICE_GROUP: ${AUTH_SERVICE_GROUP}
      AUTH_API_VERSION: ${AUTH_API_VERSION}
      AUTH_API_PORT: ${AUTH_API_PORT}
      FRONTEND_HOST: ${FRONTEND_HOST}
      FRONTEND_PORT: ${FRONTEND_PORT}
      CLIENT_SECRET_FILE: ${CLIENT_SECRET_FILE}
      AUTH_DB_USER: ${AUTH_DB_USER}
      AUTH_DB_PASSWORD: ${AUTH_DB_PASSWORD}
      AUTH_DB: ${AUTH_DB}
      AUTH_DB_HOST: ${POSTGRES_HOST}
      AUTH_DB_PORT: ${POSTGRES_PORT}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      JWT_REFRESH_KEY: ${JWT_REFRESH_KEY}
      JWT_OIDC_KEY: ${JWT_OIDC_KEY}
      JWT_ALGORITHM: ${JWT_ALGORITHM}
      BCRYPT_EFF: ${BCRYPT_EFF}
    networks:
      - entask
    deploy:
      replicas: ${AUTH_REPLICAS:-3}
      labels:
        - traefik.enable=true
        - traefik.http.routers.auth.rule=PathPrefix(`/api/auth`)
        - traefik.http.services.auth-service.loadbalancer.server.port=${AUTH_API_PORT}

  placement:
    image: daprio/dapr
    command: ["./placement", "-port", "50006"]
    ports:
      - "50006:50006"
    networks:
      - entask
    deploy:
      replicas: 1

networks:
  entask:
    driver: overlay
