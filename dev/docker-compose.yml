services:
  postgres:
    container_name: entask-core-postgres
    image: postgres:alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ./core/postgres/initdb.sql:/docker-entrypoint-initdb.d/init.sql
      - ./core/postgres/data:/var/lib/postgresql/data
    networks:
      - entask
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "-U",
          "${POSTGRES_USER}",
          "-p",
          "${POSTGRES_PORT}",
        ]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 5s

  pgbouncer:
    container_name: entask-core-pgbouncer
    image: bitnami/pgbouncer:1.24.1
    environment:
      PGBOUNCER_PORT: ${PGBOUNCER_PORT}
      POSTGRESQL_HOST: ${POSTGRES_HOST}
      POSTGRESQL_PORT: ${POSTGRES_PORT}
      POSTGRESQL_PASSWORD: ${AUTH_DB_USER}
      POSTGRESQL_USER: ${AUTH_DB_PASSWORD}
    volumes:
      - ./core/pgbouncer/pgbouncer.ini:/etc/pgbouncer/pgbouncer.ini:ro
      - ./core/pgbouncer/userlist.txt:/etc/pgbouncer/userlist.txt:ro
    depends_on:
      - postgres
    networks:
      - entask

  flyway:
    container_name: entask-core-flyway
    build:
      context: /core/flyway
      dockerfile: Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_MIGRATIONS_USER: ${POSTGRES_MIGRATIONS_USER}
      POSTGRES_MIGRATIONS_PASSWORD: ${POSTGRES_MIGRATIONS_PASSWORD}
      AUTH_DB: ${AUTH_DB}
      GATEWAY_DB: ${GATEWAY_DB}
      CONVERSION_DB: ${CONVERSION_DB}
    volumes:
      - "./core/flyway/scripts:/flyway/sql/"
    networks:
      - entask

  traefik:
    container_name: entask-core-traefik
    image: traefik:latest
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 8080
        published: 8080
        protocol: tcp
        mode: host
    healthcheck:
      test: ["CMD", "traefik", "version"]
      interval: 10s
      timeout: 15s
      retries: 5
      start_period: 5s
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./gateway/traefik/traefik.yml:/etc/traefik/traefik.yml
    networks:
      - entask

  pgadmin:
    image: dpage/pgadmin4
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${POSTGRES_PASSWORD}
    networks:
      - entask
    ports:
      - "5434:80"

  frontend:
    build: ./frontend
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT}"
    volumes:
      - ./frontend:/frontend
    networks:
      - entask
    develop:
      watch:
        - action: sync+restart
          path: ./frontend
          target: /frontend
          
  auth-proxy:
    build: ./gateway/proxy/auth
    environment:
      AUTH_PROXY_PORT: ${AUTH_PROXY_PORT}
      AUTH_PROXY_HOST: ${AUTH_PROXY_HOST}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      JWT_OIDC_KEY: ${JWT_OIDC_KEY}
    volumes:
      - ./gateway/proxy/auth:/gateway/proxy/auth
    networks:
      - entask
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.auth-proxy.loadbalancer.server.port=${AUTH_PROXY_PORT}"
      - "traefik.http.middlewares.auth-proxy.forwardauth.address=http://localhost:${AUTH_PROXY_PORT}/proxy/auth/authorize"
      - "traefik.http.middlewares.auth-proxy.forwardauth.authRequestHeaders=Accept,x-id-token,x-refresh-token,Authorization"
      - "traefik.http.middlewares.auth-proxy.forwardauth.trustForwardHeader=true"
      - "traefik.http.middlewares.auth-proxy.forwardauth.forwardBody=true"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:${AUTH_PROXY_PORT}/proxy/auth/health"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 5s    
  
  version-service:
    build:
      context: ./services/version-api
      dockerfile: Dockerfile
    environment:
      VERSION_SERVICE_PORT: ${VERSION_SERVICE_PORT}
      AUTH_SERVICE_PORT: ${AUTH_SERVICE_PORT}
      USER_SERVICE_PORT: ${USER_SERVICE_PORT}
    networks:
      - entask
    volumes:
      - ./services/version-api:/services/version-api
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "--fail",
          "http://localhost:${VERSION_SERVICE_PORT}/api/version",
        ]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 5s
    labels:
      - traefik.enable=true
      - traefik.http.routers.version.rule=PathRegexp(`/api/version(.*?)`)
      - traefik.http.routers.version.service=version-service
      - traefik.http.services.version-service.loadbalancer.server.port=${VERSION_SERVICE_PORT}

  auth-service:
    build:
      context: ./services/auth
      dockerfile: Dockerfile
    environment:
      SERVICE_GROUP: ${AUTH_SERVICE_GROUP}
      AUTH_API_VERSION: ${AUTH_API_VERSION}
      AUTH_SERVICE_PORT: ${AUTH_SERVICE_PORT}
      AUTH_REDIS_HOST: ${REDIS_HOST}
      AUTH_REDIS_PORT: ${REDIS_PORT}
      FRONTEND_HOST: ${FRONTEND_HOST}
      FRONTEND_PORT: ${FRONTEND_PORT}
      CLIENT_SECRET_FILE: ${CLIENT_SECRET_FILE}
      AUTH_DB_USER: ${AUTH_DB_USER}
      AUTH_DB_PASSWORD: ${AUTH_DB_PASSWORD}
      AUTH_DB: ${AUTH_DB}
      AUTH_DB_HOST: ${POSTGRES_HOST}
      AUTH_DB_PORT: ${POSTGRES_PORT}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      JWT_REFRESH_KEY: ${JWT_REFRESH_KEY}
      JWT_OIDC_KEY: ${JWT_OIDC_KEY}
      JWT_ALGORITHM: ${JWT_ALGORITHM}
      BCRYPT_EFF: ${BCRYPT_EFF}
      TRAEFIK_USES_HTTP: ${TRAEFIK_USES_HTTP}
      TRAEFIK_HTTP_PORT: ${TRAEFIK_HTTP_PORT}
      TRAEFIK_HTTPS_PORT: ${TRAEFIK_HTTPS_PORT}
    networks:
      - entask
    volumes:
      - ./services/auth:/services/auth
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "--fail",
          "http://localhost:${AUTH_SERVICE_PORT}/api/auth/health",
        ]
      interval: 10s
      timeout: 15s
      retries: 5
      start_period: 5s
    labels:
      - traefik.enable=true
      - traefik.http.routers.auth.rule=PathRegexp(`/api/auth(.*?)`)
      - traefik.http.routers.auth.service=auth-service
      - traefik.http.services.auth-service.loadbalancer.server.port=${AUTH_SERVICE_PORT}
      - traefik.http.routers.auth.middlewares=auth-proxy@docker
    develop:
      watch:
        - action: sync+restart
          path: ./services/auth
          target: /services/auth

  redis:
    image: redis:alpine
    environment:
      REDIS_PORT: ${REDIS_PORT}
      REDIS_HOST: ${REDIS_HOST}
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    networks:
      - entask

  placement:
    image: daprio/dapr
    command: ["./placement", "-port", "50006"]
    ports:
      - "50006:50006"
    networks:
      - entask

networks:
  entask: null
