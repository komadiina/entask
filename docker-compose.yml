services:
  frontend: 
    container_name: entask-frontend
    build: ./frontend
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT}"
    volumes: 
      - ./frontend:/frontend
    networks:
      - entask
    develop:
      watch:
        - action: sync+restart
          path: ./frontend
          target: /frontend
  
  gateway-service-registry:
    container_name: entask-gateway-redis
    image: redis:alpine
    environment:
      - G_REDIS_PORT: ${G_REDIS_PORT}
    command: ["--port", "${G_REDIS_PORT}"]
    ports:
      - "${G_REDIS_PORT}:${G_REDIS_PORT}"
    networks:
      - entask
  
  gateway-router:
    container_name: entask-gateway-router
    build: ./gateway/router
    environment:
      - G_ROUTER_PORT: ${GATEWAY_ROUTER_PORT}
      - G_REDIS_HOST: ${GATEWAY_REDIS_HOST}
      - G_REDIS_PORT: ${GATEWAY_REDIS_PORT}
    depends_on:
      - gateway-redis
    ports:
      - "${G_ROUTER_PORT}:${G_ROUTER_PORT}"
    networks:
      - entask
  
  gateway-auth-check:
    container_name: entask-gateway-auth-check
    build: ./gateway/auth-check
    environment:
      - G_AUTH_CHECK_PORT: ${G_AUTH_CHECK_PORT}
    ports:
      - "${G_AUTH_CHECK_PORT}:${G_AUTH_CHECK_PORT}"
    networks:
      - entask
  
  auth-service:
    container_name: entask-auth
    build:
      context: ./services/auth
      dockerfile: Dockerfile
    environment:
      AUTH_API_VERSION: ${API_VERSION}
      AUTH_API_PORT: ${API_PORT}
      FRONTEND_HOST: ${FRONTEND_HOST}
      FRONTEND_PORT: ${FRONTEND_PORT}
      CLIENT_SECRET_FILE: ${CLIENT_SECRET_FILE}
      PGSQL_DATABASE: ${POSTGRES_DB}
      PGSQL_USER: ${POSTGRES_USER}
      PGSQL_PASSWORD: ${POSTGRES_PASSWORD}
      PGSQL_HOST: ${PGSQL_HOST}
      PGSQL_PORT: ${POSTGRES_PORT}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      JWT_REFRESH_KEY: ${JWT_REFRESH_KEY}
      JWT_OIDC_KEY: ${JWT_OIDC_KEY}
      JWT_ALGORITHM: ${JWT_ALGORITHM}
      BCRYPT_EFF: ${BCRYPT_EFF}
    networks:
      - entask
    
  auth-db:
    container_name: entask-auth-db
    image: postgres:alpine
    command: ["-p", "$POSTGRES_PORT"]
    environment:
      PGUSER: ${AUTH_DB_USER}
      POSTGRES_USER: ${AUTH_DB_USER}
      POSTGRES_PASSWORD: ${AUTH_DB_PASSWORD}
      POSTGRES_DB: ${AUTH_DB}
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    expose:
      - "${POSTGRES_PORT}"
    volumes:
      - ./databases/auth/scripts/:/docker-entrypoint-initdb.d/
      - ./databases/auth/data/:/var/lib/postgresql/data/
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "$POSTGRES_USER", "-d", "$POSTGRES_DB", "-p", "$POSTGRES_PORT"]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 5s
    networks: 
      - entask
  
  auth-flyway:
    container_name: entask-auth-flyway
    image: flyway/flyway
    depends_on:
      auth-db:
        condition: service_healthy
  user-service:
  
  user-db:
  
  user-flyway:
  
  conversion-api-service:
  
  conversion-api-db:
  
  conversion-api-flyway:
  
  nats:
    image: nats:2.11-alpine
  
  placement:
    container_name: entask-dapr-placement
    image: daprio/dapr
    command: [
      "./placement",
        "-port", "50006"
    ]
    ports:
      - "50006:50006"
    networks:
      - entask
  
  conversion-video-to-gif:
  
  conversion-video-to-gif-dapr:
  
  
  pgadmin:
    container_name: entask-pgadmin
    image: dpage/pgadmin4
    restart: unless-stopped
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${POSTGRES_PASSWORD}
    networks:
      - entask
    ports:
      - "5434:80"
    volumes:
      - ./pgadmin:/var/lib/pgadmin
  
  
networks:
  entask: null